{"version":3,"sources":["ZStackScroller.jsx","App.js","serviceWorker.js","index.js"],"names":["ZStackScroller","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","images","images2","has2","currentIndex","isPlaying","animationTimer","imageContainer","currentFilter","setImageIndex","bind","assertThisInitialized","event","setState","Number","target","value","names2","length","names","i","img","Image","src","push","console","log","preloadImages","initialSlice","prevProps","prevState","snapshot","react_default","a","createElement","className","id","alt","orient","type","step","min","max","onChange","Component","App","ZStackScroller_ZStackScroller","Array","from","e","num","size","s","pad","animSpeed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90ab1584.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ZStackScroller.css';\r\n\r\n// const props = {\r\n//   names: Array.from({ length: 100 }, (e, i) => { return \"explosion00-frame\" + pad(i+1, 3) + \".png\"; }),\r\n//   names2: numstacks ? Array.from({ length: 100 }, (e, i) => { return \"explosion01-nofire-frame\" + pad(i+1, 3) + \".png\"; }) : null,\r\n//   animSpeed: 100,\r\n//   initialSlice: 50\r\n// };\r\n\r\n\r\nexport default class ZStackScroller extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images: [],\r\n      images2: [],\r\n      has2: false,\r\n      currentIndex: 0,\r\n      isPlaying: false,\r\n      animationTimer: null,\r\n      imageContainer: null, // document.getElementById(\"imagecontainer\"),\r\n      currentFilter: \"\"\r\n    };\r\n\r\n    // preload images\r\n    //this.preloadImages();\r\n\r\n    this.setImageIndex = this.setImageIndex.bind(this);\r\n  }\r\n\r\n  setImageIndex(event) {\r\n    this.setState({currentIndex: Number(event.target.value)});\r\n    return true;\r\n  }\r\n\r\n  has2() {\r\n    return (\r\n      this.props.names2 && \r\n      this.props.names2.length && \r\n      this.props.names2.length === this.props.names.length\r\n    );\r\n  }\r\n\r\n  preloadImages() {\r\n    if (!this.props.names) {\r\n      console.log(\"Error: nothing to show?\");\r\n      return;\r\n    }\r\n    const images = [];\r\n    for (let i = 0; i < this.props.names.length; ++i) {\r\n      const img = new Image();\r\n      img.src = this.props.names[i];\r\n      images.push(img);\r\n    }\r\n    const images2 = [];\r\n    if (this.has2()) {\r\n      for (let i = 0; i < this.props.names2.length; ++i) {\r\n        const img = new Image();\r\n        img.src = this.props.names2[i];\r\n        images2.push(img);\r\n      }\r\n    }\r\n    this.setState({images, images2});\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.preloadImages();\r\n    this.setState({currentIndex: this.props.initialSlice});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n  }\r\n\r\n  render() {\r\n    // construct this based on this.state\r\n    return (\r\n      <div className=\"ZStackScroller\" id=\"zstackplayer\">\r\n        <div className=\"ZStackScroller-imagecontainer\" id=\"imagecontainer\">\r\n          <img className=\"ZStackScroller-img\" alt=\"\" src={this.props.names[this.state.currentIndex]}></img>\r\n        </div>\r\n\r\n        <button className=\"ZStackScroller-btn ZStackScroller-playbtn\" id=\"play\">\r\n          <i className=\"fa fa-play\"></i>\r\n        </button>\r\n\r\n        <button className=\"ZStackScroller-btn ZStackScroller-nextbtn\" id=\"nextslide\">\r\n          <i className=\"fa fa-step-forward\"></i>\r\n        </button>\r\n        \r\n        <input className=\"ZStackScroller-slider\" id=\"rangeslider\" orient=\"vertical\" type=\"range\" step=\"1\" \r\n          value={this.state.currentIndex} \r\n          min=\"0\" \r\n          max={this.props.names.length}\r\n          onChange={this.setImageIndex}\r\n        ></input>    \r\n        \r\n        <button className=\"ZStackScroller-btn ZStackScroller-prevbtn\" id=\"prevslide\">\r\n          <i className=\"fa fa-step-backward\"></i>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport ZStackScroller from './ZStackScroller';\nimport './App.css';\n\nfunction pad(num, size) {\n  var s = num+\"\";\n  while (s.length < size) s = \"0\" + s;\n  return s;\n}\n\n// const url = new URL(window.location.href);\n// let numstacks = url.searchParams.get('n');\n// if (numstacks) {\n//   numstacks = parseInt(numstacks, 10);\n// }\n// const options = {\n//   names: Array.from({ length: 100 }, (e, i) => { return \"explosion00-frame\" + pad(i+1, 3) + \".png\"; }),\n//   names2: numstacks ? Array.from({ length: 100 }, (e, i) => { return \"explosion01-nofire-frame\" + pad(i+1, 3) + \".png\"; }) : null,\n//   animSpeed: 100,\n//   initialSlice: 50\n// };\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ZStackScroller\n            names={Array.from({ length: 100 }, (e, i) => { return \"explosion00-frame\" + pad(i+1, 3) + \".png\"; })}\n            animSpeed={100}\n            initialSlice={50}\n          >\n          </ZStackScroller>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}